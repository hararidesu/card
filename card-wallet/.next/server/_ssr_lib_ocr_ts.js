"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_ssr_lib_ocr_ts";
exports.ids = ["_ssr_lib_ocr_ts"];
exports.modules = {

/***/ "(ssr)/./lib/ocr.ts":
/*!********************!*\
  !*** ./lib/ocr.ts ***!
  \********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   extractTextFromImage: () => (/* binding */ extractTextFromImage),\n/* harmony export */   parseCardInfo: () => (/* binding */ parseCardInfo),\n/* harmony export */   processCardImage: () => (/* binding */ processCardImage)\n/* harmony export */ });\n/* harmony import */ var tesseract_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tesseract.js */ \"(ssr)/./node_modules/tesseract.js/src/index.js\");\n/* harmony import */ var tesseract_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(tesseract_js__WEBPACK_IMPORTED_MODULE_0__);\n\nasync function extractTextFromImage(imageData) {\n    const worker = await (0,tesseract_js__WEBPACK_IMPORTED_MODULE_0__.createWorker)(\"jpn+eng\");\n    try {\n        const { data: { text } } = await worker.recognize(imageData);\n        return text;\n    } finally{\n        await worker.terminate();\n    }\n}\nfunction parseCardInfo(text) {\n    const lines = text.split(\"\\n\").map((line)=>line.trim()).filter((line)=>line.length > 0);\n    const result = {};\n    // 店名を検索 (一般的に最初の行か、\"クリニック\", \"病院\", \"医院\", \"歯科\"を含む行)\n    const clinicKeywords = [\n        \"クリニック\",\n        \"病院\",\n        \"医院\",\n        \"歯科\",\n        \"クリニック\",\n        \"ホスピタル\",\n        \"メディカル\"\n    ];\n    const clinicLine = lines.find((line)=>clinicKeywords.some((keyword)=>line.includes(keyword))) || lines[0];\n    if (clinicLine) {\n        result.store_name = clinicLine.replace(/[^\\w\\u3040-\\u309F\\u30A0-\\u30FF\\u4E00-\\u9FAF]/g, \"\");\n    }\n    // 会員番号を検索 (数字のみの行、または\"No.\"を含む行)\n    const memberNumberPatterns = [\n        /(?:会員番号|患者番号|診察券番号|No\\.?)\\s*[:：]?\\s*([0-9A-Z\\-]+)/i,\n        /^([0-9]{6,}|\\d{3}-\\d{3}-\\d{3,4}|\\d{4}-\\d{4})$/,\n        /No\\.?\\s*([0-9A-Z\\-]+)/i\n    ];\n    for (const line of lines){\n        for (const pattern of memberNumberPatterns){\n            const match = line.match(pattern);\n            if (match) {\n                result.member_number = match[1] || match[0];\n                break;\n            }\n        }\n        if (result.member_number) break;\n    }\n    // 電話番号を検索\n    const phonePattern = /(\\d{2,4}[-\\s]?\\d{2,4}[-\\s]?\\d{4})/;\n    for (const line of lines){\n        const match = line.match(phonePattern);\n        if (match) {\n            result.phone_number = match[1].replace(/\\s+/g, \"-\");\n            break;\n        }\n    }\n    // URLを検索\n    const urlPattern = /(https?:\\/\\/[^\\s]+|www\\.[^\\s]+|[a-zA-Z0-9.-]+\\.(com|jp|net|org|co\\.jp))/i;\n    for (const line of lines){\n        const match = line.match(urlPattern);\n        if (match) {\n            let url = match[1];\n            if (!url.startsWith(\"http\")) {\n                url = \"https://\" + url;\n            }\n            result.url = url;\n            break;\n        }\n    }\n    // バーコードやQRコードの数値を検索\n    const barcodePattern = /^[0-9]{8,}$/;\n    for (const line of lines){\n        if (barcodePattern.test(line) && line !== result.member_number) {\n            result.barcode = line;\n            break;\n        }\n    }\n    return result;\n}\nasync function processCardImage(imageData) {\n    try {\n        const text = await extractTextFromImage(imageData);\n        console.log(\"OCR結果:\", text) // デバッグ用\n        ;\n        return parseCardInfo(text);\n    } catch (error) {\n        console.error(\"OCR処理エラー:\", error);\n        return {};\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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L2xpYi9vY3IudHM/ZmM3MSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVXb3JrZXIgfSBmcm9tICd0ZXNzZXJhY3QuanMnXG5cbmV4cG9ydCBpbnRlcmZhY2UgT0NSUmVzdWx0IHtcbiAgc3RvcmVfbmFtZTogc3RyaW5nXG4gIG1lbWJlcl9udW1iZXI6IHN0cmluZ1xuICBwaG9uZV9udW1iZXI6IHN0cmluZ1xuICB1cmw6IHN0cmluZ1xuICBiYXJjb2RlOiBzdHJpbmdcbiAgcXJfY29kZTogc3RyaW5nXG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBleHRyYWN0VGV4dEZyb21JbWFnZShpbWFnZURhdGE6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nPiB7XG4gIGNvbnN0IHdvcmtlciA9IGF3YWl0IGNyZWF0ZVdvcmtlcignanBuK2VuZycpXG4gIFxuICB0cnkge1xuICAgIGNvbnN0IHsgZGF0YTogeyB0ZXh0IH0gfSA9IGF3YWl0IHdvcmtlci5yZWNvZ25pemUoaW1hZ2VEYXRhKVxuICAgIHJldHVybiB0ZXh0XG4gIH0gZmluYWxseSB7XG4gICAgYXdhaXQgd29ya2VyLnRlcm1pbmF0ZSgpXG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlQ2FyZEluZm8odGV4dDogc3RyaW5nKTogUGFydGlhbDxPQ1JSZXN1bHQ+IHtcbiAgY29uc3QgbGluZXMgPSB0ZXh0LnNwbGl0KCdcXG4nKS5tYXAobGluZSA9PiBsaW5lLnRyaW0oKSkuZmlsdGVyKGxpbmUgPT4gbGluZS5sZW5ndGggPiAwKVxuICBcbiAgY29uc3QgcmVzdWx0OiBQYXJ0aWFsPE9DUlJlc3VsdD4gPSB7fVxuICBcbiAgLy8g5bqX5ZCN44KS5qSc57SiICjkuIDoiKznmoTjgavmnIDliJ3jga7ooYzjgYvjgIFcIuOCr+ODquODi+ODg+OCr1wiLCBcIueXhemZolwiLCBcIuWMu+mZolwiLCBcIuatr+enkVwi44KS5ZCr44KA6KGMKVxuICBjb25zdCBjbGluaWNLZXl3b3JkcyA9IFsn44Kv44Oq44OL44OD44KvJywgJ+eXhemZoicsICfljLvpmaInLCAn5q2v56eRJywgJ+OCr+ODquODi+ODg+OCrycsICfjg5vjgrnjg5Tjgr/jg6snLCAn44Oh44OH44Kj44Kr44OrJ11cbiAgY29uc3QgY2xpbmljTGluZSA9IGxpbmVzLmZpbmQobGluZSA9PiBcbiAgICBjbGluaWNLZXl3b3Jkcy5zb21lKGtleXdvcmQgPT4gbGluZS5pbmNsdWRlcyhrZXl3b3JkKSlcbiAgKSB8fCBsaW5lc1swXVxuICBcbiAgaWYgKGNsaW5pY0xpbmUpIHtcbiAgICByZXN1bHQuc3RvcmVfbmFtZSA9IGNsaW5pY0xpbmUucmVwbGFjZSgvW15cXHdcXHUzMDQwLVxcdTMwOUZcXHUzMEEwLVxcdTMwRkZcXHU0RTAwLVxcdTlGQUZdL2csICcnKVxuICB9XG4gIFxuICAvLyDkvJrlk6Hnlarlj7fjgpLmpJzntKIgKOaVsOWtl+OBruOBv+OBruihjOOAgeOBvuOBn+OBr1wiTm8uXCLjgpLlkKvjgoDooYwpXG4gIGNvbnN0IG1lbWJlck51bWJlclBhdHRlcm5zID0gW1xuICAgIC8oPzrkvJrlk6Hnlarlj7d85oKj6ICF55Wq5Y+3fOiouuWvn+WIuOeVquWPt3xOb1xcLj8pXFxzKls677yaXT9cXHMqKFswLTlBLVpcXC1dKykvaSxcbiAgICAvXihbMC05XXs2LH18XFxkezN9LVxcZHszfS1cXGR7Myw0fXxcXGR7NH0tXFxkezR9KSQvLFxuICAgIC9Ob1xcLj9cXHMqKFswLTlBLVpcXC1dKykvaVxuICBdXG4gIFxuICBmb3IgKGNvbnN0IGxpbmUgb2YgbGluZXMpIHtcbiAgICBmb3IgKGNvbnN0IHBhdHRlcm4gb2YgbWVtYmVyTnVtYmVyUGF0dGVybnMpIHtcbiAgICAgIGNvbnN0IG1hdGNoID0gbGluZS5tYXRjaChwYXR0ZXJuKVxuICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgIHJlc3VsdC5tZW1iZXJfbnVtYmVyID0gbWF0Y2hbMV0gfHwgbWF0Y2hbMF1cbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHJlc3VsdC5tZW1iZXJfbnVtYmVyKSBicmVha1xuICB9XG4gIFxuICAvLyDpm7voqbHnlarlj7fjgpLmpJzntKJcbiAgY29uc3QgcGhvbmVQYXR0ZXJuID0gLyhcXGR7Miw0fVstXFxzXT9cXGR7Miw0fVstXFxzXT9cXGR7NH0pL1xuICBmb3IgKGNvbnN0IGxpbmUgb2YgbGluZXMpIHtcbiAgICBjb25zdCBtYXRjaCA9IGxpbmUubWF0Y2gocGhvbmVQYXR0ZXJuKVxuICAgIGlmIChtYXRjaCkge1xuICAgICAgcmVzdWx0LnBob25lX251bWJlciA9IG1hdGNoWzFdLnJlcGxhY2UoL1xccysvZywgJy0nKVxuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cbiAgXG4gIC8vIFVSTOOCkuaknOe0olxuICBjb25zdCB1cmxQYXR0ZXJuID0gLyhodHRwcz86XFwvXFwvW15cXHNdK3x3d3dcXC5bXlxcc10rfFthLXpBLVowLTkuLV0rXFwuKGNvbXxqcHxuZXR8b3JnfGNvXFwuanApKS9pXG4gIGZvciAoY29uc3QgbGluZSBvZiBsaW5lcykge1xuICAgIGNvbnN0IG1hdGNoID0gbGluZS5tYXRjaCh1cmxQYXR0ZXJuKVxuICAgIGlmIChtYXRjaCkge1xuICAgICAgbGV0IHVybCA9IG1hdGNoWzFdXG4gICAgICBpZiAoIXVybC5zdGFydHNXaXRoKCdodHRwJykpIHtcbiAgICAgICAgdXJsID0gJ2h0dHBzOi8vJyArIHVybFxuICAgICAgfVxuICAgICAgcmVzdWx0LnVybCA9IHVybFxuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cbiAgXG4gIC8vIOODkOODvOOCs+ODvOODieOChFFS44Kz44O844OJ44Gu5pWw5YCk44KS5qSc57SiXG4gIGNvbnN0IGJhcmNvZGVQYXR0ZXJuID0gL15bMC05XXs4LH0kL1xuICBmb3IgKGNvbnN0IGxpbmUgb2YgbGluZXMpIHtcbiAgICBpZiAoYmFyY29kZVBhdHRlcm4udGVzdChsaW5lKSAmJiBsaW5lICE9PSByZXN1bHQubWVtYmVyX251bWJlcikge1xuICAgICAgcmVzdWx0LmJhcmNvZGUgPSBsaW5lXG4gICAgICBicmVha1xuICAgIH1cbiAgfVxuICBcbiAgcmV0dXJuIHJlc3VsdFxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcHJvY2Vzc0NhcmRJbWFnZShpbWFnZURhdGE6IHN0cmluZyk6IFByb21pc2U8UGFydGlhbDxPQ1JSZXN1bHQ+PiB7XG4gIHRyeSB7XG4gICAgY29uc3QgdGV4dCA9IGF3YWl0IGV4dHJhY3RUZXh0RnJvbUltYWdlKGltYWdlRGF0YSlcbiAgICBjb25zb2xlLmxvZygnT0NS57WQ5p6cOicsIHRleHQpIC8vIOODh+ODkOODg+OCsOeUqFxuICAgIHJldHVybiBwYXJzZUNhcmRJbmZvKHRleHQpXG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignT0NS5Yem55CG44Ko44Op44O8OicsIGVycm9yKVxuICAgIHJldHVybiB7fVxuICB9XG59Il0sIm5hbWVzIjpbImNyZWF0ZVdvcmtlciIsImV4dHJhY3RUZXh0RnJvbUltYWdlIiwiaW1hZ2VEYXRhIiwid29ya2VyIiwiZGF0YSIsInRleHQiLCJyZWNvZ25pemUiLCJ0ZXJtaW5hdGUiLCJwYXJzZUNhcmRJbmZvIiwibGluZXMiLCJzcGxpdCIsIm1hcCIsImxpbmUiLCJ0cmltIiwiZmlsdGVyIiwibGVuZ3RoIiwicmVzdWx0IiwiY2xpbmljS2V5d29yZHMiLCJjbGluaWNMaW5lIiwiZmluZCIsInNvbWUiLCJrZXl3b3JkIiwiaW5jbHVkZXMiLCJzdG9yZV9uYW1lIiwicmVwbGFjZSIsIm1lbWJlck51bWJlclBhdHRlcm5zIiwicGF0dGVybiIsIm1hdGNoIiwibWVtYmVyX251bWJlciIsInBob25lUGF0dGVybiIsInBob25lX251bWJlciIsInVybFBhdHRlcm4iLCJ1cmwiLCJzdGFydHNXaXRoIiwiYmFyY29kZVBhdHRlcm4iLCJ0ZXN0IiwiYmFyY29kZSIsInByb2Nlc3NDYXJkSW1hZ2UiLCJjb25zb2xlIiwibG9nIiwiZXJyb3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./lib/ocr.ts\n");

/***/ })

};
;